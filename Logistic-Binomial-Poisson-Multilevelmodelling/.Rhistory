DIC(Modell_1e)[1]
DIC(Modell_1f)[1]
#WAIC
WAIC(Modell_1a)[1]
WAIC(Modell_1e)[1]
WAIC(Modell_1f)[1]
#Confounding check
plot( coeftab(Modell_1a,Modell_1e,Modell_1f),prob=0.909 )
#Kredbilitetsband
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modex1 <- getmode(Upg1f_data$x1)
modex2 <- getmode(Upg1f_data$x2)
modex3 <- getmode(Upg1f_data$x3)
modex4 <- getmode(Upg1f_data$x4)
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5) )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.909) )
shade( mu.ci , x5.seq )
plot( ylim=c(0,1.5) )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.909) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
Upg2_data <- Vaccination_Barn[,c(1:5,7)]
flist <- alist( y ~ dbinom( 1 , p ) ,
logit(p) <- b0[z1] + b1*x1 + b2*x2 + b3*x3 + b4*x4,
b0[z1] ~ dnorm(0,10) ,
b1 ~ dnorm(0,10) ,
b2 ~ dnorm(0,10) ,
b3 ~ dnorm(0,10) ,
b4 ~ dnorm(0,10)
)
Modell_2 <- map2stan(flist,data=Upg2_data,iter = 5000)
Modell_2 <- map2stan(flist,data=Upg2_data,iter = 10000)
precis(Modell_2, depth=2)
Modell_2 <- map2stan(flist,data=Upg2_data,iter = 20000)
asd<-precis(Modell_2, depth=2)
xtable(asd@output,label = "upg2a")
require(xtable)
xtable(asd@output,label = "upg2a")
DIC(Modell_2)[1]
DIC(Modell_1e)[1]
WAIC(Modell_2)[1]
WAIC(Modell_1e)[1]
require(rethinking)
require(xtable)
load("C:/Users/Jakob/Desktop/Bayesian statistics/lab4/VaccinationsData.Rdata")
Upg1_data <- Vaccination_Barn[,1:3]
flist <- alist( y ~ dbinom( 1 , p ) ,
logit(p) <- b0 + b1*x1 + b2*x2,
b0 ~ dnorm(0,10) ,
b1 ~ dnorm(0,10) ,
b2 ~ dnorm(0,10)
)
#Konvergens analys
asd<-precis(Modell_1a, prob = 0.909)
asd
binom_df <- data.frame("y" = rep(0,times=4),"x1" = c(0,1,0,1), "x2" = c(0,0,1,1),"Unsuccesfull" = rep(0,times=4))
binom_df[1,1] <- sum(Upg1_data[Upg1_data$x1 == 0 & Upg1_data$x2 == 0,1])
binom_df[2,1] <- sum(Upg1_data[Upg1_data$x1 == 1 & Upg1_data$x2 == 0,1])
binom_df[3,1] <- sum(Upg1_data[Upg1_data$x1 == 0 & Upg1_data$x2 == 1,1])
binom_df[4,1] <- sum(Upg1_data[Upg1_data$x1 == 1 & Upg1_data$x2 == 1,1])
binom_df[,4] <- aggregate(x = Upg1_data$y,
by = list(x1 = Upg1_data$x1, x2 = Upg1_data$x2),
FUN = length)[,3]
binom_df
aggregate(x = Upg1_data$y,
by = list(x1 = Upg1_data$x1, x2 = Upg1_data$x2),
FUN = length)
aggregate(x = Upg1_data$y,
by = list(x1 = Upg1_data$x1, x2 = Upg1_data$x2),
FUN = sum)
binom_df
#b2
AnvPar <- PostSamp_1a$b2
NIter <- length(PostSamp_1a$b2)
Means <-  matrix(0,nrow=NIter,ncol=1,byrow=TRUE)
for (iter in 1:NIter){
Means[iter] <- mean(AnvPar[1:iter])
}
plot(Means, main = "Konvergens för b2 posteriormean")
binom_df <- data.frame("y" = rep(0,times=4),"x1" = c(0,1,0,1), "x2" = c(0,0,1,1),"Unsuccesfull" = rep(0,times=4))
binom_df[1,1] <- sum(Upg1_data[Upg1_data$x1 == 0 & Upg1_data$x2 == 0,1])
binom_df[2,1] <- sum(Upg1_data[Upg1_data$x1 == 1 & Upg1_data$x2 == 0,1])
binom_df[3,1] <- sum(Upg1_data[Upg1_data$x1 == 0 & Upg1_data$x2 == 1,1])
binom_df[4,1] <- sum(Upg1_data[Upg1_data$x1 == 1 & Upg1_data$x2 == 1,1])
binom_df[,4] <- aggregate(x = Upg1_data$y,
by = list(x1 = Upg1_data$x1, x2 = Upg1_data$x2),
FUN = length)[,3]
binom_df
binom_df[1,1] <- sum(Upg1_data[Upg1_data$x1 == 0 & Upg1_data$x2 == 0,1])
binom_df
#Jämförelse av binom och logit
precis(Modell_binom,prob=0.909)
precis(Modell_1a,prob=0.909)
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
p.x10.x20
PostSamp_1a$b0
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
binom_df[1,1]/binom_df[1,4]
#
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
binom_df[1,1]/binom_df[1,4]
p.x10.x20
#Gör om posteriorn till sannolikhet och gör kredibilitetsintervall
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
precis(p.x10.x20, prob = 0.952)
#'Sanna' sannolikheten i data
binom_df[1,1]/binom_df[1,4]
View(Vaccination_Barn)
#x1 = 0, x2 = 0
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
precis(p.x10.x20, prob = 0.952)
#'Sanna' sannolikheten i data
binom_df[1,1]/binom_df[1,4]
#x1 = 1, x2 = 0
p.x11.x20 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 ))
precis(p.x10.x21, prob = 0.952)
binom_df[2,1]/binom_df[2,4]
#x1 = 0, x2 = 1
p.x10.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b2 ))
precis(p.x10.x21, prob = 0.952)
binom_df[3,1]/binom_df[3,4]
#x1 = 1, x2 = 1
p.x11.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 + PostSamp_1a$b2 ))
precis(p.x11.x21, prob = 0.952)
binom_df[4,1]/binom_df[4,4]
#Visualisera
plot(x = 1:4,y = c(0.38,0.6,0.26,0.46), type = "p", ylim = c(0.2,0.7),ylab="",xlab="")
lines(x = c(1,1),y = c(0.32,0.44))
lines(x = c(2,2),y = c(0.56,0.64))
lines(x = c(3,3),y = c(0.22,0.29))
lines(x = c(4,4),y = c(0.43,0.48))
points(x = 1:4,y = c(0.39,0.6,0.25,0.46), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5), pch=19)
postcheck(Modell_binom,n=1000,prob=0.909)
binom_df
precis(Modell_binom)
precis(Modell_1a)
ExpChangeOdds <- exp(PostSamp_1a$b1)
dens(ExpChangeOdds)
mean(ExpChangeOdds)
ExpChangeOdds <- exp(PostSamp_1a$b1)
dens(ExpChangeOdds)
mean(ExpChangeOdds)
ExpChangeOdds <- exp(PostSamp_1a$b0 + PostSamp_1a$b1)
dens(ExpChangeOdds)
ExpChangeOdds <- exp(PostSamp_1a$b1)
dens(ExpChangeOdds)
mean(ExpChangeOdds)
DIC(Modell_1a)[1]
DIC(Modell_1e)[1]
DIC(Modell_1a)[1]
DIC(Modell_1e)[1]
plot( coeftab(Modell_1a,Modell_1e),prob=0.909 )
View(Vaccination_Barn)
#Kredbilitetsband givet typvärdet av x1-x4
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modex1 <- getmode(Upg1f_data$x1)
modex2 <- getmode(Upg1f_data$x2)
modex3 <- getmode(Upg1f_data$x3)
modex4 <- getmode(Upg1f_data$x4)
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
#Kredbilitetsband givet typvärdet av x1-x4
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modex1 <- getmode(Upg1f_data$x1)
modex2 <- getmode(Upg1f_data$x2)
modex3 <- getmode(Upg1f_data$x3)
modex4 <- getmode(Upg1f_data$x4)
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( ( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(-1,1),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( ( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
PostSamp_1f$b0
#Kredbilitetsband givet typvärdet av x1-x4
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modex1 <- getmode(Upg1f_data$x1)
modex2 <- getmode(Upg1f_data$x2)
modex3 <- getmode(Upg1f_data$x3)
modex4 <- getmode(Upg1f_data$x4)
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(-1,1),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(-1,1),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( ( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
modex1 <- getmode(Upg1f_data$x1)
modex2 <- getmode(Upg1f_data$x2)
modex3 <- getmode(Upg1f_data$x3)
modex4 <- getmode(Upg1f_data$x4)
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(-1,1),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
mu.ci <- sapply( x5.seq , function(x)
PI( ( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
#Kredbilitetsband givet typvärdet av x1-x4
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
modex1 <- getmode(Upg1f_data$x1)
modex2 <- getmode(Upg1f_data$x2)
modex3 <- getmode(Upg1f_data$x3)
modex4 <- getmode(Upg1f_data$x4)
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
PostSamp_1f$b0
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( log( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
shade( mu.ci , x5.seq )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( exp( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( logistic( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.001)
mu.ci <- sapply( x5.seq , function(x)
PI( logistic( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.001)
mu.ci <- sapply( x5.seq , function(x)
PI( logistic( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( logistic( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
modex1 <- getmode(Upg1f_data$x1)
modex1
modex2 <- getmode(Upg1f_data$x2)
modex2 <- getmode(Upg1f_data$x2)
modex2
modex3 <- getmode(Upg1f_data$x3)
modex3
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
PostSamp_1f <- extract.samples(Modell_1f)
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
mu.ci <- sapply( x5.seq , function(x)
PI( logistic( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
#Skapa plot
plot( Upg1f_data$y ~ Upg1f_data$x5 ,ylim=c(0,1.5),type="n" )
#Ta sampels från modellen
PostSamp_1f <- extract.samples(Modell_1f)
#Skapa grid av värden från min av x5 till max av x5, eftersom det är x5 som ska vara som funk av y
x5.seq <- seq(from=min(Upg1f_data$x5),to=max(Upg1f_data$x5),by=0.01)
#Beräkna bandet för y som funktion av x5 givet typvärdet på x1-x4
#Notera Logistic eftersom parametrarna är uttryckta i logodds, vill ha som probability
mu.ci <- sapply( x5.seq , function(x)
PI( logistic( PostSamp_1f$b0 + PostSamp_1f$b1*modex1 + PostSamp_1f$b2*modex2 +
PostSamp_1f$b3*modex3 + PostSamp_1f$b4*modex4 + PostSamp_1f$b5*x) , prob=0.952) )
shade( mu.ci , x5.seq )
precis(Modell_2, depth=2)
precis(Modell_2, depth=2)
DIC(Modell_2)[1]
DIC(Modell_1e)[1]
WAIC(Modell_2)[1]
WAIC(Modell_1e)[1]
DIC(Modell_1e)[1]
DIC(Modell_2)[1]
DIC(Modell_2b)[1]
require(rethinking)
bombman <- data.frame(pois = c(rep(0, 229), rep(1, 211), rep(2, 93), rep(3, 35), rep(4, 7), rep(5, 1)))
#Konjugerade prior ska användas för poissonfördelningen eftersom data är pois fördelat.
#Gamma(alpha,beta) konjugerade prior för poisfördelning
#Icke-informativ prior -> Gamma(1 + sumxi, 1 + n)
flist <- alist( pois ~ dpois(lambda) ,
lambda <- dgamma(1,1)
)
resBomb <- map(flist, data=bombman)
precis(resBomb)
flist <- alist( pois ~ dpois(lambda) ,
log(lambda) <- b0,
b0 ~ dnorm(0,10)
)
resBomb_2b <- map2stan(flist, bombman)
precis(resBomb_2b)
precis(resBomb_2b)
bombSamples_2b <- extract.samples(resBomb_2b,n=1e3)
sum(exp(bombSamples_2b$b0) > 1)/length(bombSamples_2b$b0)
flist <- alist( pois ~ dpois(lambda) ,
log(lambda) <- dnorm(0,10)
)
resBomb_2b <- map2stan(flist, bombman)
flist <- alist( pois ~ dpois(lambda) ,
log(lambda) <- h,
h ~ dnorm(0,10)
)
resBomb_2b <- map2stan(flist, bombman)
precis(resBomb_2b)
bombSamples_2b <- extract.samples(resBomb_2b,n=1e3)
sum(exp(bombSamples_2b$h) > 1)/length(bombSamples_2b$h)
bombSamples_2b
exp(bombSamples_2b$h)
#x1 = 0, x2 = 0
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
precis(p.x10.x20, prob = 0.952)
require(rethinking)
load("C:/Users/Jakob/Desktop/Bayesian statistics/lab4/VaccinationsData.Rdata")
#x1 = 0, x2 = 0
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
precis(p.x10.x20, prob = 0.952)
#'Sanna' sannolikheten i data
binom_df[1,1]/binom_df[1,4]
#x1 = 1, x2 = 0
p.x11.x20 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 ))
precis(p.x10.x21, prob = 0.952)
binom_df[2,1]/binom_df[2,4]
#x1 = 0, x2 = 1
p.x10.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b2 ))
precis(p.x10.x21, prob = 0.952)
binom_df[3,1]/binom_df[3,4]
#x1 = 1, x2 = 1
p.x11.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 + PostSamp_1a$b2 ))
precis(p.x11.x21, prob = 0.952)
binom_df[4,1]/binom_df[4,4]
#Visualisera
plot(x = 1:4,y = c(0.38,0.6,0.26,0.46), type = "p", ylim = c(0.2,0.7),ylab="",xlab="")
lines(x = c(1,1),y = c(0.32,0.44))
lines(x = c(2,2),y = c(0.56,0.64))
lines(x = c(3,3),y = c(0.22,0.29))
lines(x = c(4,4),y = c(0.43,0.48))
points(x = 1:4,y = c(0.39,0.6,0.25,0.46), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5), pch=19)
#x1 = 0, x2 = 0
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
precis(p.x10.x20, prob = 0.952)
#'Sanna' sannolikheten i data
binom_df[1,1]/binom_df[1,4]
#x1 = 1, x2 = 0
p.x11.x20 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 ))
precis(p.x10.x21, prob = 0.952)
binom_df[2,1]/binom_df[2,4]
#x1 = 0, x2 = 1
p.x10.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b2 ))
precis(p.x10.x21, prob = 0.952)
binom_df[3,1]/binom_df[3,4]
#x1 = 1, x2 = 1
p.x11.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 + PostSamp_1a$b2 ))
precis(p.x11.x21, prob = 0.952)
binom_df[4,1]/binom_df[4,4]
#Visualisera
plot(x = 1:4,y = c(0.38,0.6,0.26,0.46), type = "p", ylim = c(0.2,0.7),ylab="",xlab="")
lines(x = c(1,1),y = c(0.32,0.44))
lines(x = c(2,2),y = c(0.56,0.64))
lines(x = c(3,3),y = c(0.22,0.29))
lines(x = c(4,4),y = c(0.43,0.48))
points(x = 1:4,y = c(0.39,0.6,0.25,0.46), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5), pch=19)
#x1 = 1, x2 = 1
p.x11.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 + PostSamp_1a$b2 ))
require(rethinking)
load("C:/Users/Jakob/Desktop/Bayesian statistics/lab4/VaccinationsData.Rdata")
#x1 = 0, x2 = 0
p.x10.x20 <- as.vector(logistic( PostSamp_1a$b0 ))
plot(p.x10.x20)
dens(p.x10.x20)
#x1 = 1, x2 = 0
p.x11.x20 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 ))
precis(p.x10.x21, prob = 0.952)
binom_df[2,1]/binom_df[2,4]
#x1 = 0, x2 = 1
p.x10.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b2 ))
precis(p.x10.x21, prob = 0.952)
binom_df[3,1]/binom_df[3,4]
#x1 = 1, x2 = 1
p.x11.x21 <- as.vector(logistic( PostSamp_1a$b0 + PostSamp_1a$b1 + PostSamp_1a$b2 ))
precis(p.x11.x21, prob = 0.952)
binom_df[4,1]/binom_df[4,4]
dens(p.x10.x20)
dens(p.x10.x20)
dens(p.x11.x20, add=TRUE, col="red")
dens(p.x10.x21, add=TRUE, col="blue")
dens(p.x11.x21, add=TRUE, col="green")
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,1))
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,2))
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,5))
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,10))
dens(p.x11.x20, add=TRUE, col="red")
dens(p.x10.x21, add=TRUE, col="blue")
dens(p.x11.x21, add=TRUE, col="green")
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,20))
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,15))
dens(p.x11.x20, add=TRUE, col="red")
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,17))
dens(p.x11.x20, add=TRUE, col="red")
dens(p.x10.x21, add=TRUE, col="blue")
dens(p.x11.x21, add=TRUE, col="green")
#Visualisera
plot(x = 1:4,y = c(0.38,0.6,0.26,0.46), type = "p", ylim = c(0.2,0.7),ylab="",xlab="")
dens(p.x10.x20, xlim = c(0,1),ylim=c(0,20))
dens(p.x11.x20, add=TRUE, col="red")
dens(p.x10.x21, add=TRUE, col="blue")
dens(p.x11.x21, add=TRUE, col="green")
dens(Vaccination_Barn$y)
#Visualisera
plot(x = 1:4,y = c(0.38,0.6,0.26,0.46), type = "p", ylim = c(0.2,0.7),ylab="",xlab="")
lines(x = c(1,1),y = c(0.32,0.44))
lines(x = c(2,2),y = c(0.56,0.64))
lines(x = c(3,3),y = c(0.22,0.29))
lines(x = c(4,4),y = c(0.43,0.48))
points(x = 1:4,y = c(0.39,0.6,0.25,0.46), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5), pch=19)
logistic(Vaccination_Barn$y)
dens(logistic(Vaccination_Barn$y))
